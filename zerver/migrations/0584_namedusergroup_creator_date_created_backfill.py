# Generated by Django 5.0.8 on 2024-08-31 08:09

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.db.models import F, OuterRef, Subquery


def backfill_creator_id_and_date_created_from_realm_audit_log(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    RealmAuditLog = apps.get_model("zerver", "RealmAuditLog")
    RealmAuditLog.USER_GROUP_CREATED = 701
    NamedUserGroup = apps.get_model("zerver", "NamedUserGroup")

    batch_size = 10000
    try:
        for id_start in range(
            RealmAuditLog.objects.earliest("id").id,
            RealmAuditLog.objects.latest("id").id + 1,
            batch_size,
        ):
            creation_entry = RealmAuditLog.objects.filter(
                id__range=(id_start, id_start + batch_size - 1),
                event_type=RealmAuditLog.USER_GROUP_CREATED,
                acting_user__isnull=False,
                modified_user_group=OuterRef("pk"),
            )
            NamedUserGroup.objects.annotate(
                new_creator=Subquery(creation_entry.values("acting_user")),
                new_date_created=Subquery(creation_entry.values("event_time")),
            ).filter(date_created=None, new_date_created__isnull=False).update(
                creator=F("new_creator"), date_created=F("new_date_created")
            )
    except RealmAuditLog.DoesNotExist:
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("zerver", "0583_namedusergroup_creator_namedusergroup_date_created"),
    ]

    operations = [
        migrations.RunPython(
            backfill_creator_id_and_date_created_from_realm_audit_log,
            reverse_code=migrations.RunPython.noop,
            elidable=True,
        ),
    ]
